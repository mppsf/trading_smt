openapi: 3.0.3
info:
  title: Smart Money Trading Analyzer
  description: Advanced ICT Smart Money Concepts Analysis API
  version: 2.0.0
  contact:
    name: API Support
servers:
  - url: http://localhost:8000
    description: Development server
  - url: https://api.smartmoney.trading
    description: Production server

tags:
  - name: health
    description: System health monitoring
  - name: settings
    description: System configuration management
  - name: market-data
    description: Real-time and historical market data
  - name: smt-analysis
    description: Smart Money Technical analysis and signals
  - name: killzones
    description: Trading sessions and time-based analysis
  - name: websocket
    description: Real-time data streaming and notifications

paths:
  /health:
    get:
      tags: [health]
      summary: System health check
      description: Check overall system status including Redis connectivity and service health
      operationId: getHealthStatus
      responses:
        '200':
          description: Health status retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /api/v1/settings:
    get:
      tags: [settings]
      summary: Get current system settings
      operationId: getCurrentSettings
      responses:
        '200':
          description: Settings retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingsResponse'
        '500':
          description: Internal server error
    put:
      tags: [settings]
      summary: Update system settings
      operationId: updateSettings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SettingsUpdateRequest'
      responses:
        '200':
          description: Settings updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingsResponse'
        '400':
          description: Invalid settings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'

  /api/v1/market-data:
    get:
      tags: [market-data]
      summary: Get market data for symbols
      operationId: getMarketData
      parameters:
        - name: symbols
          in: query
          schema:
            type: string
            default: "ES=F,NQ=F"
        - name: timeframe
          in: query
          schema:
            type: string
            enum: [5m, 15m, 1h, 1d]
            default: "5m"
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
      responses:
        '200':
          description: Market data retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MarketDataResponse'
        '500':
          description: Internal server error

  /api/v1/smt-analysis:
    get:
      tags: [smt-analysis]
      summary: Get Smart Money Technical analysis
      operationId: getSMTAnalysis
      parameters:
        - name: signal_types
          in: query
          schema:
            type: array
            items:
              $ref: '#/components/schemas/SMTSignalType'
          style: form
          explode: false
        - name: min_strength
          in: query
          schema:
            type: number
            minimum: 0.0
            maximum: 1.0
        - name: confirmed_only
          in: query
          schema:
            type: boolean
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
      responses:
        '200':
          description: Analysis results retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SMTAnalysisResponse'

  /api/v1/smt-analysis/stats:
    get:
      tags: [smt-analysis]
      summary: Get analysis statistics
      operationId: getSMTStats
      responses:
        '200':
          description: Statistics retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisStatsResponse'

  /api/v1/true-opens:
    get:
      tags: [smt-analysis]
      summary: Get True Opens levels
      operationId: getTrueOpens
      responses:
        '200':
          description: True Opens levels retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrueOpensResponse'

  /api/v1/fractals:
    get:
      tags: [smt-analysis]
      summary: Get fractal points
      operationId: getFractals
      parameters:
        - name: symbol
          in: query
          schema:
            type: string
            default: "ES=F"
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Fractal points retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FractalsResponse'

  /api/v1/volume-anomalies:
    get:
      tags: [smt-analysis]
      summary: Get volume anomalies
      operationId: getVolumeAnomalies
      parameters:
        - name: symbol
          in: query
          schema:
            type: string
            default: "ES=F"
        - name: threshold
          in: query
          schema:
            type: number
            minimum: 1.0
            maximum: 5.0
            default: 2.0
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
      responses:
        '200':
          description: Volume anomalies retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VolumeAnomalyResponse'

  /api/v1/killzones:
    get:
      tags: [killzones]
      summary: Get trading sessions
      operationId: getKillzones
      responses:
        '200':
          description: Sessions retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KillzonesResponse'
  /api/v1/smt-signals:
    get:
      tags: [smt-analysis]
      summary: Get SMT signals with custom parameters
      operationId: getSMTSignals
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: signal_type
          in: query
          schema:
            type: string
        - name: min_strength
          in: query
          schema:
            type: number
            minimum: 0.0
            maximum: 1.0
        - name: confirmed_only
          in: query
          schema:
            type: boolean
            default: false
        - name: smt_strength_threshold
          in: query
          schema:
            type: number
            minimum: 0.0
            maximum: 1.0
        - name: divergence_threshold
          in: query
          schema:
            type: number
            minimum: 0.0
            maximum: 5.0
        - name: confirmation_candles
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 10
        - name: volume_multiplier
          in: query
          schema:
            type: number
            minimum: 1.0
            maximum: 5.0
        - name: max_signals_display
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: refresh_interval
          in: query
          schema:
            type: integer
            minimum: 5000
            maximum: 300000
        - name: london_open
          in: query
          schema:
            type: string
            pattern: '^[0-2][0-9]:[0-5][0-9]$'
        - name: ny_open
          in: query
          schema:
            type: string
            pattern: '^[0-2][0-9]:[0-5][0-9]$'
        - name: asia_open
          in: query
          schema:
            type: string
            pattern: '^[0-2][0-9]:[0-5][0-9]$'
        - name: killzone_priorities
          in: query
          schema:
            type: string
      responses:
        '200':
          description: SMT signals retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SMTAnalysisResponse'
        '400':
          description: Invalid parameters
        '500':
          description: Internal server error

  /ws/market-updates:
    get:
      tags: [websocket]
      summary: Real-time market updates WebSocket
      operationId: connectMarketUpdatesWS
      description: |
        WebSocket connection for real-time market data and SMT analysis updates.
      responses:
        '101': description: Connection established
        '400': description: Upgrade failed
        '500': description: Connection error

  /ws:
    get:
      tags: [websocket]
      summary: WebSocket connection
      operationId: connectWebSocket
      description: |
        Establish WebSocket connection for real-time updates.
      responses:
        '101': description: Connection established
        '400': description: Upgrade failed
        '500': description: Connection error

  /ws:
    get:
      tags: [websocket]
      summary: WebSocket connection
      operationId: connectWebSocket
      description: |
        Establish WebSocket connection for real-time updates.
      responses:
        '101': description: Connection established
        '400': description: Upgrade failed
        '500': description: Connection error

components:
  schemas:
    HealthResponse:
      type: object
      required: [status, redis, timestamp]
      properties:
        status:
          type: string
          enum: [healthy, unhealthy, unknown]
        redis:
          type: string
          enum: [connected, disconnected, unknown]
        timestamp:
          type: string
          format: date-time

    SettingsResponse:
      type: object
      required: [smt_strength_threshold, killzone_priorities, refresh_interval, max_signals_display]
      properties:
        smt_strength_threshold: { type: number, minimum: 0.0, maximum: 1.0 }
        killzone_priorities: { type: array, items: { type: integer } }
        refresh_interval: { type: integer, minimum: 1000 }
        max_signals_display: { type: integer, minimum: 1 }
        divergence_threshold: { type: number, minimum: 0.1, maximum: 2.0 }
        confirmation_candles: { type: integer, minimum: 1, maximum: 10 }
        volume_multiplier: { type: number, minimum: 1.0, maximum: 5.0 }
        london_open: { type: string, pattern: '^[0-2][0-9]:[0-5][0-9]$' }
        ny_open: { type: string, pattern: '^[0-2][0-9]:[0-5][0-9]$' }
        asia_open: { type: string, pattern: '^[0-2][0-9]:[0-5][0-9]$' }
    SettingsUpdateRequest:
      type: object
      properties:
        smt_strength_threshold: { type: number, minimum: 0.0, maximum: 1.0 }
        killzone_priorities: { type: array, items: { type: integer } }
        refresh_interval: { type: integer, minimum: 1000 }
        max_signals_display: { type: integer, minimum: 1 }
        divergence_threshold: { type: number, minimum: 0.1, maximum: 2.0 }
        confirmation_candles: { type: integer, minimum: 1, maximum: 10 }
        volume_multiplier: { type: number, minimum: 1.0, maximum: 5.0 }
        london_open: { type: string, pattern: '^[0-2][0-9]:[0-5][0-9]$' }
        ny_open: { type: string, pattern: '^[0-2][0-9]:[0-5][0-9]$' }
        asia_open: { type: string, pattern: '^[0-2][0-9]:[0-5][0-9]$' }
    MarketDataResponse:
      type: object
      required: [symbol, current_price, timestamp, ohlcv]
      properties:
        symbol: { type: string }
        current_price: { type: number }
        change_percent: { type: number }
        volume: { type: integer }
        timestamp: { type: string, format: date-time }
        ohlcv:
          type: array
          items: { $ref: '#/components/schemas/OHLCVData' }
        market_state: { type: string, enum: [open, closed, pre_market, after_hours, unknown] }
    OHLCVData:
      type: object
      required: [timestamp, Open, High, Low, Close, Volume]
      properties:
        timestamp: { type: string, format: date-time }
        Open: { type: number }
        High: { type: number }
        Low: { type: number }
        Close: { type: number }
        Volume: { type: integer }
    SMTSignalType:
      type: string
      enum: [smt_bullish_divergence, smt_bearish_divergence, false_break_up, false_break_down, volume_spike, volume_divergence_bullish, volume_divergence_bearish, judas_swing_bullish, judas_swing_bearish]
    SMTAnalysisResponse:
      type: object
      required: [signals, total_count, analysis_timestamp]
      properties:
        signals:
          type: array
          items: { $ref: '#/components/schemas/SMTSignalResponse' }
        total_count: { type: integer }
        analysis_timestamp: { type: string, format: date-time }
        market_phase: { type: string, enum: [trending, consolidation, reversal, breakout, unknown] }
    SMTSignalResponse:
      type: object
      required: [timestamp, signal_type, strength, nasdaq_price, sp500_price, divergence_percentage, confirmation_status, details]
      properties:
        timestamp: { type: string, format: date-time }
        signal_type: { $ref: '#/components/schemas/SMTSignalType' }
        strength: { type: number, minimum: 0.0, maximum: 1.0 }
        nasdaq_price: { type: number }
        sp500_price: { type: number }
        divergence_percentage: { type: number }
        confirmation_status: { type: boolean }
        details: { type: object, additionalProperties: true }
    AnalysisStatsResponse:
      type: object
      required: [total_signals, confirmed_signals, signal_distribution, avg_strength, last_analysis]
      properties:
        total_signals: { type: integer }
        confirmed_signals: { type: integer }
        signal_distribution: { type: object, additionalProperties: { type: integer } }
        avg_strength: { type: number, minimum: 0.0, maximum: 1.0 }
        last_analysis: { type: string, format: date-time }
    TrueOpensResponse:
      type: object
      required: [es_opens, nq_opens]
      properties:
        es_opens: { $ref: '#/components/schemas/TrueOpenResponse' }
        nq_opens: { $ref: '#/components/schemas/TrueOpenResponse' }
    TrueOpenResponse:
      type: object
      properties:
        daily: { type: number, nullable: true }
        weekly: { type: number, nullable: true }
        quarterly: { type: number, nullable: true }
        timestamp: { type: string, format: date-time }
    FractalsResponse:
      type: object
      properties:
        symbol: { type: string }
        high_fractals:
          type: array
          items: { $ref: '#/components/schemas/FractalPoint' }
        low_fractals:
          type: array
          items: { $ref: '#/components/schemas/FractalPoint' }
        timestamp: { type: string, format: date-time }
    FractalPoint:
      type: object
      required: [timestamp, price, type, index]
      properties:
        timestamp: { type: string, format: date-time }
        price: { type: number }
        type: { type: string, enum: [high, low] }
        index: { type: integer }
    VolumeAnomalyResponse:
      type: object
      properties:
        timestamp: { type: string, format: date-time }
        volume: { type: integer }
        avg_volume: { type: integer }
        volume_ratio: { type: number }
        anomaly_type: { type: string }
        significance: { type: number }
    KillzonesResponse:
      type: object
      properties:
        killzones:
          type: array
          items: { $ref: '#/components/schemas/Killzone' }
    Killzone:
      type: object
      properties:
        name: { type: string }
        start_time: { type: string }
        end_time: { type: string }
        description: { type: string }
        is_active: { type: boolean }
        timezone: { type: string }
    ErrorResponse:
      type: object
      properties:
        detail: { type: string }
    ValidationErrorResponse:
      type: object
      properties:
        detail: { type: string }
